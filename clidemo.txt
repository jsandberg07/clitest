adding a db
cause you'll have to have a readme 
1. needs postgres cause that's how its written. create table cage card
2. needs goose. write your creation table and check it
3. need your connection string, store it in an env and add it to git ignore
4. create db connection and store it in config to access stuff
5. write queries and adding values, activate and deactivate
6. get the data from the queries and count number of billing days
7. have some good number for the total cost or whatever
8. make sure your threads dont get FUCKED
9. Check for dupe cards, check for activation errors
i literally wrote the same notes twice i guess that just means that i'm not COMPLETELY INSANE
or at least consistently insane. method to the maddness.

AUTOMATED TESTING ON THE DB 
found a post about a library only a few days old! but you have to paste in all your schema code into it
https://michael.stapelberg.ch/posts/2024-11-19-testing-with-go-and-postgresql-ephemeral-dbs/
so set up a schema and then fuck with it
will probably look hella cool as a project 


being absolutely berserk and crushing a huge amount of work then falling asleep during lunch and being like "what was i doing"
ALWAYS write notes when youre programming lucid

//
Create a flag:
symbol, description, and if it takes a value
symbol is without the -
in the getCmd function, $flag := flag{}
add to commands map
add handling in the function itself. takes value are used later, doesnt sets a bool

Create a command:
write the new function (handle flagss)
create a new function getNewCmd() Command {}
flags map := make(map[string]flag)
newCmd := Command{name, description, function, flags}

Create a state:
getState() &State {map, cli message}
make sure to add help by default, prints what is available in current map
getStateMap() and put that in


