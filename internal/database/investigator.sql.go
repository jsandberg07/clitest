// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: investigator.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createInvestigator = `-- name: CreateInvestigator :one
INSERT INTO investigators(id, i_name, nickname, email, position, active)
VALUES(gen_random_uuid(), $1, $2, $3, $4, true)
RETURNING id, i_name, nickname, email, position, active
`

type CreateInvestigatorParams struct {
	IName    string
	Nickname sql.NullString
	Email    sql.NullString
	Position uuid.UUID
}

func (q *Queries) CreateInvestigator(ctx context.Context, arg CreateInvestigatorParams) (Investigator, error) {
	row := q.db.QueryRowContext(ctx, createInvestigator,
		arg.IName,
		arg.Nickname,
		arg.Email,
		arg.Position,
	)
	var i Investigator
	err := row.Scan(
		&i.ID,
		&i.IName,
		&i.Nickname,
		&i.Email,
		&i.Position,
		&i.Active,
	)
	return i, err
}

const getInvestigatorByEmail = `-- name: GetInvestigatorByEmail :one
SELECT id, i_name, nickname, email, position, active FROM investigators
WHERE $1 = email
`

func (q *Queries) GetInvestigatorByEmail(ctx context.Context, email sql.NullString) (Investigator, error) {
	row := q.db.QueryRowContext(ctx, getInvestigatorByEmail, email)
	var i Investigator
	err := row.Scan(
		&i.ID,
		&i.IName,
		&i.Nickname,
		&i.Email,
		&i.Position,
		&i.Active,
	)
	return i, err
}

const getInvestigatorByID = `-- name: GetInvestigatorByID :one
SELECT id, i_name, nickname, email, position, active FROM investigators
WHERE $1 = id
`

func (q *Queries) GetInvestigatorByID(ctx context.Context, id uuid.UUID) (Investigator, error) {
	row := q.db.QueryRowContext(ctx, getInvestigatorByID, id)
	var i Investigator
	err := row.Scan(
		&i.ID,
		&i.IName,
		&i.Nickname,
		&i.Email,
		&i.Position,
		&i.Active,
	)
	return i, err
}

const getInvestigatorByName = `-- name: GetInvestigatorByName :many
SELECT id, i_name, nickname, email, position, active FROM investigators
WHERE $1 = i_name OR $1 = nickname
`

func (q *Queries) GetInvestigatorByName(ctx context.Context, iName string) ([]Investigator, error) {
	rows, err := q.db.QueryContext(ctx, getInvestigatorByName, iName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Investigator
	for rows.Next() {
		var i Investigator
		if err := rows.Scan(
			&i.ID,
			&i.IName,
			&i.Nickname,
			&i.Email,
			&i.Position,
			&i.Active,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateInvestigator = `-- name: UpdateInvestigator :exec
UPDATE investigators
SET i_name = $2,
    nickname = $3,
    email = $4,
    position = $5,
    active = $6
WHERE $1 = id
`

type UpdateInvestigatorParams struct {
	ID       uuid.UUID
	IName    string
	Nickname sql.NullString
	Email    sql.NullString
	Position uuid.UUID
	Active   bool
}

func (q *Queries) UpdateInvestigator(ctx context.Context, arg UpdateInvestigatorParams) error {
	_, err := q.db.ExecContext(ctx, updateInvestigator,
		arg.ID,
		arg.IName,
		arg.Nickname,
		arg.Email,
		arg.Position,
		arg.Active,
	)
	return err
}
