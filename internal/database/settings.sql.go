// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: settings.sql

package database

import (
	"context"
)

const activateSelfOnly = `-- name: ActivateSelfOnly :one
SELECT only_activate_self FROM settings
`

func (q *Queries) ActivateSelfOnly(ctx context.Context) (bool, error) {
	row := q.db.QueryRowContext(ctx, activateSelfOnly)
	var only_activate_self bool
	err := row.Scan(&only_activate_self)
	return only_activate_self, err
}

const firstTimeSetupComplete = `-- name: FirstTimeSetupComplete :exec
UPDATE settings SET settings_complete = true
`

func (q *Queries) FirstTimeSetupComplete(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, firstTimeSetupComplete)
	return err
}

const getSettings = `-- name: GetSettings :one
SELECT settings_complete, only_activate_self FROM settings
`

func (q *Queries) GetSettings(ctx context.Context) (Setting, error) {
	row := q.db.QueryRowContext(ctx, getSettings)
	var i Setting
	err := row.Scan(&i.SettingsComplete, &i.OnlyActivateSelf)
	return i, err
}

const setUpSettings = `-- name: SetUpSettings :exec

INSERT INTO settings(settings_complete, only_activate_self)
VALUES (false, false)
`

// settings is saving the settings. this should ONLY ever have one row
func (q *Queries) SetUpSettings(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, setUpSettings)
	return err
}

const updateActivateSelf = `-- name: UpdateActivateSelf :exec
UPDATE settings SET only_activate_self = $1
`

func (q *Queries) UpdateActivateSelf(ctx context.Context, onlyActivateSelf bool) error {
	_, err := q.db.ExecContext(ctx, updateActivateSelf, onlyActivateSelf)
	return err
}
