// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: configuration.sql

package database

import (
	"context"
)

const activateSelfOnly = `-- name: ActivateSelfOnly :one
SELECT only_activate_self FROM config
`

func (q *Queries) ActivateSelfOnly(ctx context.Context) (bool, error) {
	row := q.db.QueryRowContext(ctx, activateSelfOnly)
	var only_activate_self bool
	err := row.Scan(&only_activate_self)
	return only_activate_self, err
}

const firstTimeSetupComplete = `-- name: FirstTimeSetupComplete :exec
UPDATE config SET config_complete = true
`

func (q *Queries) FirstTimeSetupComplete(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, firstTimeSetupComplete)
	return err
}

const getConfig = `-- name: GetConfig :one
SELECT config_complete, only_activate_self FROM config
`

func (q *Queries) GetConfig(ctx context.Context) (Config, error) {
	row := q.db.QueryRowContext(ctx, getConfig)
	var i Config
	err := row.Scan(&i.ConfigComplete, &i.OnlyActivateSelf)
	return i, err
}

const setUpConfig = `-- name: SetUpConfig :exec

INSERT INTO config(config_complete, only_activate_self)
VALUES (false, false)
`

// config is saving the settings. this should ONLY ever have one row
func (q *Queries) SetUpConfig(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, setUpConfig)
	return err
}

const updateActivateSelf = `-- name: UpdateActivateSelf :exec
UPDATE config SET only_activate_self = $1
`

func (q *Queries) UpdateActivateSelf(ctx context.Context, onlyActivateSelf bool) error {
	_, err := q.db.ExecContext(ctx, updateActivateSelf, onlyActivateSelf)
	return err
}
